#include <iostream>
#include <set>
#include <map>
#include <vector>

using namespace std;

int menos_conectado(const vector <set<int>> &vs){
    bool primero=true;
    int num_min_conect=9999,pos_min_conect,conex=0,num_conectados=0,num_total_conectados=0;
    set<int>::iterator q,p;
    for(int i=0;i<vs.size();i++){
            num_total_conectados=num_conectados=0;
            for(int z=0;z<vs.size();z++){
                    bool conectado=false;
                    for(p=vs[z].begin();p!=vs[z].end() && !conectado;++p){
                        if(vs[i].count(*p)){
                            conectado=true;
                            num_total_conectados++;
                            }
                    }
                    if(i==0 && primero){
                        pos_min_conect=0;
                        primero=false;
                    }
                    }
                    if(num_total_conectados<num_min_conect){
                        num_min_conect=num_total_conectados;
                        pos_min_conect=i;
                    }
        }
    return pos_min_conect;
}

template <class T1, class T2>
ostream& operator<<(ostream& os, const pair<T1, T2>& p) {
    os << "[" << p.first << "] = " << p.second;
    return os;
}


template <class Contenedor>
void imprime_contenedor(const Contenedor &c){
	for (auto it=c.cbegin(); it!=c.cend(); it++)
		cout << *it << ' ';

	cout << endl;
}


int test_sol(vector<set<int> > in, int sol){
	int resultado = menos_conectado(in);
	bool es_correcto = resultado==sol;

	cout << "\nResultado: " << resultado << endl;
	cout << "Solución: " << sol << endl;
	cout << "Solucion que sale:" << resultado << endl;
	cout << "Solución correcta?: " << (es_correcto ? "YES" : "NO") << endl;

	return (es_correcto ? 1 : 0);
}

int main(){
	// Simple contador para contar el número de soluciones correctas
	int num_correctas = 0;
	int total_ejercicios = 4;

	vector<set<int>> in1 = {{1}, {2}, {0,1,2}};
	int sol1 = 0;
	num_correctas += test_sol(in1, sol1);

	vector<set<int>> in2 = {{0,1,3,4},{1,2,4},{1,3,4}};
	int sol2 = 0;
	num_correctas += test_sol(in2, sol2);

	vector<set<int>> in3 = {{6,9},{5,6,9},{5,9},{1,7}};
	int sol3 = 3;
	num_correctas += test_sol(in3, sol3);

	vector<set<int>> in4 = {{1,2},{1,3},{5,6,7,8,9},{5,6,7,8,10},{1,4}};
	int sol4 = 2;
	num_correctas += test_sol(in4, sol4);

	if (num_correctas == total_ejercicios)
		cout << "\n << Felicidades! Has aprobado :) >>" << endl;
	else
		cout << "\n << Inténtalo de nuevo :( >>" << endl;
}
